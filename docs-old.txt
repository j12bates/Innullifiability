// ========================= INNULLIFIABILITY =========================

// This program is trying to solve a very specific semi-maths-related
// problem a friend and I encountered. In essence, we're trying to find
// sets of positive integer numbers which, through performing any binary
// arithmetic operations (+, -, *, /) on them (in sequence or with
// bracketing) resulting in positive integer numbers (essentially no
// non-integer ratios allowed), you cannot ever get a result of zero.

// There are 10 such sets when looking at sets of 4 values up to 9, and
// here they are:

//      1, 4, 6, 8          4, 5, 6, 8
//      1, 4, 6, 9          4, 6, 7, 8
//      1, 5, 7, 9          4, 6, 8, 9
//      3, 6, 7, 8          5, 6, 7, 9
//      3, 7, 8, 9          5, 7, 8, 9

// There are only two ways for an arithmetic operation on positive
// integers to result in zero:

//      1. Subtracting a number from itself
//      2. Multiplying any number by zero

// So clearly sets containing zero itself are out, as are sets with the
// same number twice, so we only look at sets starting at 1 without
// repetition. The only way one of these sets can be 'nullifiable' is by
// having a pair or subset of numbers which, by application of the
// arithmetic operations, gives another number in the set.

// In the most general sense, the program works by finding all the
// nullifiable sets and then returning whatever sets remain.

// Of course, one could simply create a recursive function to
// exhaustively test every operation on a set to try and make two values
// the same. However, doing this for every set would get quite costly.
// So instead, this program works backwards, generating a bunch of
// nullifiable sets by considering every single way that a particular
// value might have been reached. For example, given that the set
// (1, 3, 4) is nullifiable, we could then generate a bunch of other
// nullifiable sets by expanding the 3 into 5 and 2 (5 - 2 = 3), and all
// the other 'equivalent pairs' of 3. By generating sets instead of
// testing sets, we can eliminate a whole lot more sets faster than
// running a test over every set. This routine is referred to as
// 'mutation' in the program.

// The program keeps track of the sets by way of Set Records, which are
// just arrays that store some data for every possible set of a certain
// length. At any point, there are two records being used for generating
// sets: one 'destination' where all the nullifiable sets of the current
// length will be held, and one 'source' which was the result of the
// previous generation. Nullifiable sets can be stored by 'marking' them
// on a record.

// The program starts with pairs of the same number, which are known to
// be nullifiable. It can then mutate those into nullifiable sets of
// length three, which it will mark in a record. From then on, sets can
// be further mutated, but in addition, supersets can be marked in as
// well. Importantly, a superset of a nullifiable set does not need to
// be mutated, as the parent set has already been mutated, and mutating
// the superset won't give anything new. So, these supersets are marked
// with an additional flag in the record, while 'new' sets aren't. Only
// the new sets need to be expanded in the next generation.

// The process of generation can be described more generally in two
// steps. First, any sets that are marked at all on the source record
// have their supersets marked on the destination record. Second, any
// new nullifiable sets on the source record (not supersets) are
// mutated and marked in the destination normally. The next generation
// uses this as the source record.

// This method of mutation doesn't cover everything, and it lets some
// nullifiable sets through. So, after the final generation is made, the
// program runs the remaining sets through an exhaustive test, to weed
// out sets which are nullifiable which couldn't be caught by mutation.
// In particular, this arises because this expansion method stays within
// the range of valid set values, and some sets might be only
// nullifiable through a calculation that goes beyond that range.
