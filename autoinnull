#!/bin/sh

# ================= AUTOMATIC INNULLIFIABLE SET SCRIPT =================

# Copyright (c) 2023, Jacob Bates
# SPDX-License-Identifier: BSD-2-Clause

# Store intermediary records in a shared memory tmpfile
temp=$(mktemp /dev/shm/rec.XXXXXX)

# Make a named pipe for progress updates
progf=$(mktemp -u /tmp/prog.XXXXXX)
mkfifo $progf

tsize=$1
tmaxm=$2
th=$3
output=$4

utilpath=./bin

usage="Usage: $0 target-size target-maxval [threads [output]]"
usage1="All but <output> are positive integers"

# Read in binary numbers from the named pipe, output them in progress
# form
progRead () {
    decnums=$(od -A n -t d8 -N 16 $1)
    read current total rest <<< "$decnums"
    [ -z "$current" ] || [ -z "$total" ] || \
    echo "$current / $total ($((current * 100 / total))%)"
}

# Send the signal to the program and print the progress data each second
progLoop () {
while true
do
    sleep 0.2
    echo -ne "$(progRead $2)\r" >&2 &
    kill -s USR1 $1 || return
done
}

# Validate command-line arguments
num='^[0-9]+$'
invalid=0
grep -Pq $num <<< "$tsize" || invalid=1
grep -Pq $num <<< "$tmaxm" || invalid=1
[ -z "$th" ] || grep -Pq $num <<< "$th" || invalid=1
[ -z "$th" ] && th=1
if [ $invalid -ne 0 ]
then
    echo "$usage" >&2
    echo "$usage1" >&2
    exit 1
fi

echo "N = $tsize, M <= $tmaxm" >&2

# Get the base nullifiable sets (size-3)
echo >&2
echo "================ Finding Base Sets" >&2

$utilpath/create 3 0 $tmaxm $temp || exit 1
$utilpath/weed 3 $temp $th $progf & curwork=$!
progLoop $curwork $progf & curloop=$!
wait -n $curwork || exit 1
kill $curloop

# Iteratively make generations, going up in size
size=3
while [ $size -lt $tsize ]
do
    echo >&2
    echo "================ Expanding Size $size" >&2

    $utilpath/gen -c $size $temp $temp $th $progf & curwork=$!
    progLoop $curwork $progf & curloop=$!
    wait -n $curwork || exit 1
    kill $curloop

    size=$(($size + 1))
done

# Weed out any remaining nullifiable sets
echo >&2
echo "================ Testing Remaining Sets" >&2

$utilpath/weed $tsize $temp $th $progf & curwork=$!
progLoop $curwork $progf & curloop=$!
wait -n $curwork || exit 1
kill $curloop

# Print out the resulting innullifiable sets
echo >&2
echo "================ Result" >&2
$utilpath/eval $tsize $temp || exit 1

# Copy output
if ! [ -z "$output" ]
then
    mv $temp $output || exit 1
else
    rm $temp
fi

# Delete Named Pipe
rm $progf

exit 0
