#!/bin/sh

# ================= AUTOMATIC INNULLIFIABLE SET SCRIPT =================

# Copyright (c) 2023, Jacob Bates
# SPDX-License-Identifier: BSD-2-Clause

# Store intermediary records in a shared memory tmpfile
tempf=$(mktemp /dev/shm/rec.XXXXXX)

# Make a named pipe for progress updates
progf=$(mktemp -u /tmp/prog.XXXXXX)
mkfifo $progf

tsize=$1
tmaxm=$2
th=$3
output=$4

utilpath=./bin

usage="Usage: $0 target-size target-maxval [threads [output]]"
usage1="All but <output> are positive integers"

# Read in binary numbers from the named pipe, output them in progress
# form
progRead () {
    decnums=$(od -A n -t d8 -N 16 $1)
    read -r current total rest << END
$decnums
END
    [ -z $current ] || [ -z $total ] || \
    echo "$current / $total ($((current * 100 / total))%)"
}

# Send the signal to the program and print the progress data each second
progLoop () {
while true
do
    sleep 0.2
    printf "%s\r" "$(progRead $2)" >&2 &
    kill -s USR1 $1 || return
done
}

# Clean up backgrounded processes and files on exit
trap 'kill -s TERM "$(jobs -p)" 2> /dev/null; '"rm -f $progf $tempf" \
    EXIT HUP INT TERM

# Validate command-line arguments -- after this we know they're valid
# numbers, no need for quotes
num='^[0-9]+$'
invalid=0
echo $tsize | grep -Pq $num || invalid=1
echo $tmaxm | grep -Pq $num || invalid=1
[ -z "$th" ] || echo $th | grep -Pq $num || invalid=1
[ -z "$th" ] && th=1
if [ $invalid -ne 0 ]
then
    echo "$usage" >&2
    echo "$usage1" >&2
    exit 1
fi

echo "N = $tsize, M <= $tmaxm" >&2

# Whenever we run a work job, we'll background it, keep its PID, then
# launch a loop for progress updates and background that as well. We'll
# wait for the work program to end, then kill the loop.

# Get the base nullifiable sets (size-3)
echo >&2
echo "================ Finding Base Sets" >&2

$utilpath/create 3 0 $tmaxm $tempf || exit 1

$utilpath/weed 3 $tempf $th $progf & curwork=$!
progLoop $curwork $progf & curloop=$!
wait $curwork || exit 1
kill $curloop

# Iteratively make generations, going up in size
size=3
while [ $size -lt $tsize ]
do
    echo >&2
    echo "================ Expanding Size $size" >&2

    $utilpath/gen -c $size $tempf $tempf $th $progf & curwork=$!
    progLoop $curwork $progf & curloop=$!
    wait $curwork || exit 1
    kill $curloop

    size=$((size + 1))
done

# Weed out any remaining nullifiable sets
echo >&2
echo "================ Testing Remaining Sets" >&2

$utilpath/weed $tsize $tempf $th $progf & curwork=$!
progLoop $curwork $progf & curloop=$!
wait $curwork || exit 1
kill $curloop

# Print out the resulting innullifiable sets
echo >&2
echo "================ Result" >&2
$utilpath/eval $tsize $tempf || exit 1

# Copy output
if [ -n "$output" ]
then
    mv $tempf "$output" || exit 1
fi

exit 0
